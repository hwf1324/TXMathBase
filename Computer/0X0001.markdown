# C初学指南

这里所探讨的 C是一门编程语言，也就是the C programming language。C是目前计算机工程领域最为基础的语言之一。它的基础性地位主要来自于语言的设计和现存项目两方面。设计上它相对接近计算机架构的底层同时又提供了一定的抽象能力，让使用者在获取尽量底层的控制能力的同时可以使用相对简洁的代码；现存项目方面，用这种语言编写的工程项目几乎遍及计算机工程的各个领域，其中最为重要的是目前主要的操作系统和许多“高级语言”的运行时环境程序就是由这种语言编写的。因此，虽然这种语言现在存在包管理不完善、项目构建不方便、语言设计老旧等问题，计算机工程在可预见的未来却不会抛弃这门语言，而会以改进、更新、整合以及继续使用为主。

由于C在计算机工程中事实上的基础性设施地位，不论在开发中是否直接用到大量的C，都应当对这门语言及其相关知识有所了解。

但是，**我个人并不推荐用C作为入门计算机时学习的第一语言**。C是基础的，但这不意味着它是简单的，也不意味着它是易学的，在工程中作为基石和在学习中作为第一课是两码事。那么为什么我还要把C放到这个系列中这么靠前的部分呢？因为我写这个系列的时候已经不是入门阶段的初学者了，所以尽量按照知识结构和工程逻辑排布内容，而不是按照学习顺序排列。初学者如果想在这个系列中找到更多适合自己的内容不妨往后翻几章。

## 学什么

个人认为对于不需要大量写C代码的人来说，了解C的主要目的是阅读C代码和编译由C写的项目，基于此，所需要掌握的主要内容如下：

- C语言标准和标准库（包括宏和头文件写法）
- 标准库的实现和编译工具链
- 项目源码组织方式和基本构建工具

在这几点之外，还有一个主题是贯穿这几个学习部分的，那就是调用已经写好的库和把自己的工作提炼成新库。

通常来说，作为标准的纯C高度绑定于类Unix系统以及GNU工具链；而其他系统都有替代C的主要编程语言（例如Windows有Visual C++，Mac有Objective-C）；虽然很多嵌入式编程会用到C但往往也对C的语法和标准库做了不小的改动，基于这些原因，上边列举的内容将主要在Linux和GNU的基础上学习。

## 不学什么

目前LLVM是一个相当有竞争力的、在多种意义上跨平台的、支持C语言的工具链和运行环境。在很多方面LLVM都可以与GNU的工具链竞争，有的方面LLVM甚至走的更远。但由于LLVM并非一个仅仅关注C语言（乃至并非仅仅关注C语系）的项目，这里不将LLVM作为C语言知识的一部分。

最初的C++作为C的超集提出，几乎所有的C程序也都是C++的程序。但目前C++已经不堪重负，维持与C的一致性也不再是C和C++标准委员会的主要目标。因此虽然很多C项目也可以使用C++的工具链处理，这里仍然不推荐这种做法，因此不将利用C++工具链的知识作为C语言相关的知识介绍。

## 拓展什么

仅仅凭借C语言的基本功能和标准库是难以应对各种编程需求的，因此在了解基本的C知识后根据需要了解一些相关的非标注库和框架很有必要。C语言与类Unix系统高度绑定，甚至一些程序构建和调用也和类Unix系统的接口有关，在了解C之后首先应当对类Unix的开发做一个大致的了解。如果你在C以外还使用其他编程语言，那么了解这些编程语言和C的交互方式，熟悉一下它们和C的混合编程也是很有意义的。具体到一定的业务场景中，可以按需了解相关的专用库，例如编写GUI程序就看看GTK、做压缩就看看zlib、做数值计算就看看GNU Scientific Library (GSL)等等。

如果你对C的需求超出了阅读和编译，需要大量编写C代码，那么你还应当对开发工具有所了解，例如常用的调试工具GDB。同时，代码风格也是一个应当注意的点，好的代码风格会大大降低代码的维护难度，同时减少出错。但代码风格并不像语言标准那样具有普适性（尤其是对于涉及范围如此广泛的C来说），建议阅读一些优质项目的代码风格指南。

## 从哪里学

不仅仅是学编程语言，学很多东西的手段也无非就是阅读和实验。编程的实验条件相对容易达到，根据你习惯的操作系统，按网上或者书上的教程搭建一个开发环境，然后写就是了。阅读呢，一般需要读一些精当的教材，事半功倍。这里我完全按我个人的想法推荐一些阅读材料。

### 核心资料

* *Prata, S.* (2016). **C Primer Plus （第6版） 中文版**

这是我个人非常喜欢的一本C教程，也非常适合新手阅读。它不仅仅介绍C本身，也讲了很多学C的时候应当知晓的，有关于计算机原理、操作系统、Shell、编译和数据结构等方面的知识。但它毕竟不是面向纯粹没有接触过计算机的小白的，因此我建议读过我之前推荐的《编码的奥秘》后再来读这本书。

* **cppreference**

这是一个网站，其网址是<https://en.cppreference.com/w/>，上边有C和C++的语言标准说明和标准库参考手册。当你读完 *C Primer Plus* 之后就会明白编程仅仅是学语言是不够的，很多功能需要标准库的支持，而标准库的内容又很难全凭记忆记住（也没这个必要），因此一个随时备查的标准库参考就是编程时必不可少的工具。个人感觉买一本书在编程的时候来回翻实在太蠢，所以推荐使用这个在线网站查询。

### 补充资料

* *Kernighan, B., Ritchie, D.* (2004). **The C Programming Language**

因为C的发明者参与了这本书的编写，所以很长时间以来这本书都被捧上神坛。问题在于C的最初设计者 Dennis Ritchie 并不是唯一对C做出过贡献的人，今日的C是标准委员会、各工具链开发商和世界各地的C程序员共同造就的——就像 Linus Torvalds 并非独自一人完成的今日之Linux。因而秉持英雄史观将最初设计者参与编写的书捧上神坛并不明智。例如全书按照语言设计的思路编写，而较少考虑读者的接受能力，这对于初学者来说这本书就相当不合适。此外，这本书几十年不更新，这并不是一个好事。对于计算机工程相关的项目来说，更新就是其生命力，哪怕核心内容不做改动，不断对新发展趋势做出回应也是必须的。就算最初设计的再合理，几十年沧海桑田，也会慢慢消磨掉最初的设计优势，工程上根本没有所谓的一劳永逸。

当然了，虽然这本书不应该被强行吹上神坛，它也并非一无是处，实际上这本书在众多C教材中算得上是非常优秀的佳作。这本书的一个比较突出的特点就是会在书中介绍很多C在设计和实现中的细节，例如`printf`和`malloc`这种标准库函数是怎么实现的。此外，这本书也很重视语言和系统之间的关联性，专门用了很多篇幅介绍了C和类UNIX系统的互动。因此，个人认为这本书的适合人群主要是已经对计算机有所了解，想要比较系统深入地了解C的人。当然读者最好还有一定的知识检索能力，能在阅读后自己拓展有关C的最新内容，以弥补本书几十年不更新的缺憾。

* *Koenig, A.* (2008). **C Traps and Pitfalls**

这本书中文译名《C陷阱与缺陷》，是作者根据其一篇论文扩写而来，所以篇幅很短，可以很快读完。这本书主要列举了C的若干可能引发错误的特性以及缺陷。个人认为这又是一本被强行捧上神坛的书。在这本书写作的时候书中的很多内容是非常具有启发意义的，但几十年过去了，C的很多陷阱和缺陷已经普遍为人们所知。实际上这本书中提到的大部分内容在 *C Primer Plus* 中都讲到了。如果你选择了一本比较新的C教材，可以不读这本书。

不过，这本书还是很有教育意义的，因为在看到C语言中的如此多缺陷和陷阱之后，我更加坚定地认为最好的使用C的方式就是尽量不使用C。另外书中的建议也十分中肯，使用最安全稳妥的做法实现程序就好，不要过分探索一门满是缺陷的语言的缺陷，毕竟编程不是耍杂技。







